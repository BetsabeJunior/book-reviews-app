// <auto-generated />
using System;
using Controlbox.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Controlbox.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Controlbox.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.R.R. Tolkien",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Una aventura épica en la Tierra Media.",
                            ImageUrl = "",
                            Title = "El Señor de los Anillos"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Frank Herbert",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Una historia de poder y desierto.",
                            ImageUrl = "",
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Jane Austen",
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Romance clásico del siglo XIX.",
                            ImageUrl = "",
                            Title = "Orgullo y Prejuicio"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Yuval Noah Harari",
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Historia de la humanidad.",
                            ImageUrl = "",
                            Title = "Sapiens"
                        },
                        new
                        {
                            Id = 5,
                            Author = "R.L. Stevenson",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Búsqueda de un tesoro escondido.",
                            ImageUrl = "",
                            Title = "La Isla del Tesoro"
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "El inicio de una saga mágica.",
                            ImageUrl = "",
                            Title = "Harry Potter y la Piedra Filosofal"
                        },
                        new
                        {
                            Id = 7,
                            Author = "William Gibson",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ciberpunk y hackers del futuro.",
                            ImageUrl = "",
                            Title = "Neuromante"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Emily Brontë",
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Romance oscuro en los páramos.",
                            ImageUrl = "",
                            Title = "Cumbres Borrascosas"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Ken Follett",
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Construcción de una catedral en la Edad Media.",
                            ImageUrl = "",
                            Title = "Los Pilares de la Tierra"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Jules Verne",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Exploración subterránea asombrosa.",
                            ImageUrl = "",
                            Title = "Viaje al Centro de la Tierra"
                        },
                        new
                        {
                            Id = 11,
                            Author = "J.R.R. Tolkien",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "La primera aventura de Bilbo Bolsón.",
                            ImageUrl = "",
                            Title = "El Hobbit"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Ray Bradbury",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Relatos sobre la colonización de Marte.",
                            ImageUrl = "",
                            Title = "Crónicas Marcianas"
                        });
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fantasía"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ciencia Ficción"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Historia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Aventura"
                        });
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "$2a$11$C.XVRF2r7PZ7sLOLRtTsN.KYTs33mfHxNDsYwy6gycczIfNn.eZza",
                            ProfilePicture = ""
                        });
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Book", b =>
                {
                    b.HasOne("Controlbox.Domain.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Review", b =>
                {
                    b.HasOne("Controlbox.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Controlbox.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Controlbox.Domain.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
